// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  phone         String?
  location      String
  bio           String?
  avatar        String?
  dateOfBirth   DateTime?
  joinDate      DateTime  @default(now())
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  
  // Volunteering preferences (stored as JSON strings for SQLite compatibility)
  interests     String    @default("[]") // JSON array of interest categories
  experience    String?   // Experience level
  availability  String?   // Availability preferences
  skills        String    @default("[]") // JSON array of skills
  
  // Profile settings
  profileVisibility String @default("public") // public, private, friends
  
  // Relationships
  volunteeringHistory VolunteerHistory[]
  applications        Application[]
  achievements        Achievement[]
  reviews            Review[]
  sentMessages        Message[] @relation("MessageSender")
  receivedMessages    Message[] @relation("MessageRecipient")
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String
  mission     String?
  website     String?
  logo        String?
  location    String
  contactEmail String
  contactPhone String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Relationships
  opportunities Opportunity[]
  reviews       Review[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model Opportunity {
  id          String    @id @default(cuid())
  title       String
  description String
  longDescription String?
  category    String
  location    String
  duration    String
  startDate   DateTime?
  endDate     DateTime?
  requirements String   @default("[]") // JSON array stored as string
  benefits    String   @default("[]") // JSON array stored as string
  skills      String   @default("[]") // JSON array stored as string
  maxVolunteers Int?
  currentVolunteers Int @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  // Relationships
  applications Application[]
  reviews     Review[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("opportunities")
}

model Application {
  id            String    @id @default(cuid())
  userId        String
  opportunityId String
  status        String    @default("pending") // pending, approved, rejected, withdrawn
  message       String?
  appliedAt     DateTime  @default(now())
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id])
  opportunity Opportunity @relation(fields: [opportunityId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("applications")
}

model VolunteerHistory {
  id            String    @id @default(cuid())
  userId        String
  opportunityId String
  organizationId String
  title         String
  organization  String
  startDate     DateTime
  endDate       DateTime?
  hours         Int
  status        String    @default("active") // active, completed, cancelled
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("volunteer_history")
}

model Achievement {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  icon        String?
  earnedAt    DateTime  @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("achievements")
}

model Review {
  id            String    @id @default(cuid())
  userId        String
  opportunityId String?
  organizationId String?
  rating        Int       // 1-5 stars
  comment       String?
  isPublic      Boolean   @default(true)
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id])
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Message {
  id        String    @id @default(cuid())
  senderId  String
  recipientId String
  subject   String?
  content   String
  isRead    Boolean   @default(false)
  
  // Relationships
  sender    User      @relation("MessageSender", fields: [senderId], references: [id])
  recipient User      @relation("MessageRecipient", fields: [recipientId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}
